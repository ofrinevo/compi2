
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Dec 23 21:28:16 IST 2015
//----------------------------------------------------

import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Dec 23 21:28:16 IST 2015
  */
public class LibraryCup extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public LibraryCup() {super();}

  /** Constructor which sets the default scanner. */
  public LibraryCup(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public LibraryCup(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\021\000\002\003\011\000\002\002\004\000\002\003" +
    "\007\000\002\002\004\000\002\002\003\000\002\012\011" +
    "\000\002\012\010\000\002\013\004\000\002\013\003\000" +
    "\002\005\003\000\002\005\003\000\002\005\003\000\002" +
    "\005\003\000\002\005\005\000\002\006\003\000\002\006" +
    "\003\000\002\014\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\044\000\004\011\005\001\002\000\004\002\046\001" +
    "\002\000\004\012\006\001\002\000\006\013\007\026\010" +
    "\001\002\000\004\012\042\001\002\000\016\004\022\005" +
    "\014\006\013\007\012\011\021\014\015\001\002\000\020" +
    "\004\ufff9\005\ufff9\006\ufff9\007\ufff9\011\ufff9\014\ufff9\027" +
    "\ufff9\001\002\000\006\010\ufff6\030\ufff6\001\002\000\006" +
    "\010\ufff7\030\ufff7\001\002\000\006\010\ufff8\030\ufff8\001" +
    "\002\000\014\004\022\005\014\006\013\007\012\011\021" +
    "\001\002\000\020\004\022\005\014\006\013\007\012\011" +
    "\021\014\015\027\033\001\002\000\006\010\ufff3\030\030" +
    "\001\002\000\004\010\023\001\002\000\006\010\ufff5\030" +
    "\ufff5\001\002\000\004\010\ufff2\001\002\000\004\024\024" +
    "\001\002\000\002\001\002\000\004\025\026\001\002\000" +
    "\004\033\027\001\002\000\020\004\ufffb\005\ufffb\006\ufffb" +
    "\007\ufffb\011\ufffb\014\ufffb\027\ufffb\001\002\000\004\031" +
    "\031\001\002\000\006\010\ufff4\030\ufff4\001\002\000\020" +
    "\004\ufffa\005\ufffa\006\ufffa\007\ufffa\011\ufffa\014\ufffa\027" +
    "\ufffa\001\002\000\004\002\uffff\001\002\000\004\010\035" +
    "\001\002\000\004\024\036\001\002\000\002\001\002\000" +
    "\004\025\040\001\002\000\004\033\041\001\002\000\020" +
    "\004\ufffc\005\ufffc\006\ufffc\007\ufffc\011\ufffc\014\ufffc\027" +
    "\ufffc\001\002\000\004\026\043\001\002\000\016\004\022" +
    "\005\014\006\013\007\012\011\021\014\015\001\002\000" +
    "\020\004\022\005\014\006\013\007\012\011\021\014\015" +
    "\027\045\001\002\000\004\002\001\001\002\000\004\002" +
    "\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\044\000\004\003\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\005\016\006\017\012\010\013\015\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\005\016\006\033\001\001\000\010\005\016\006" +
    "\017\012\031\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\015\024\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\015\036\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\005\016\006\017\012\010\013\043\001\001\000\010\005" +
    "\016\006\017\012\031\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$LibraryCup$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$LibraryCup$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$LibraryCup$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 scanner.init();              
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return scanner.next_token(); 
    }
}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$LibraryCup$actions {
  private final LibraryCup parser;

  /** Constructor */
  CUP$LibraryCup$actions(LibraryCup parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$LibraryCup$do_action(
    int                        CUP$LibraryCup$act_num,
    java_cup.runtime.lr_parser CUP$LibraryCup$parser,
    java.util.Stack            CUP$LibraryCup$stack,
    int                        CUP$LibraryCup$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$LibraryCup$result;

      /* select the action based on the action number */
      switch (CUP$LibraryCup$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // formal ::= type ID 
            {
              Object RESULT =null;

              CUP$LibraryCup$result = parser.getSymbolFactory().newSymbol("formal",10, ((java_cup.runtime.Symbol)CUP$LibraryCup$stack.elementAt(CUP$LibraryCup$top-1)), ((java_cup.runtime.Symbol)CUP$LibraryCup$stack.peek()), RESULT);
            }
          return CUP$LibraryCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // method_type ::= VOID_KEYWORD 
            {
              Object RESULT =null;

              CUP$LibraryCup$result = parser.getSymbolFactory().newSymbol("method_type",4, ((java_cup.runtime.Symbol)CUP$LibraryCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$LibraryCup$stack.peek()), RESULT);
            }
          return CUP$LibraryCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // method_type ::= type 
            {
              Object RESULT =null;

              CUP$LibraryCup$result = parser.getSymbolFactory().newSymbol("method_type",4, ((java_cup.runtime.Symbol)CUP$LibraryCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$LibraryCup$stack.peek()), RESULT);
            }
          return CUP$LibraryCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // type ::= type LC RC 
            {
              Object RESULT =null;

              CUP$LibraryCup$result = parser.getSymbolFactory().newSymbol("type",3, ((java_cup.runtime.Symbol)CUP$LibraryCup$stack.elementAt(CUP$LibraryCup$top-2)), ((java_cup.runtime.Symbol)CUP$LibraryCup$stack.peek()), RESULT);
            }
          return CUP$LibraryCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // type ::= CLASS_KEYWORD 
            {
              Object RESULT =null;

              CUP$LibraryCup$result = parser.getSymbolFactory().newSymbol("type",3, ((java_cup.runtime.Symbol)CUP$LibraryCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$LibraryCup$stack.peek()), RESULT);
            }
          return CUP$LibraryCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // type ::= STRING_KEYWORD 
            {
              Object RESULT =null;

              CUP$LibraryCup$result = parser.getSymbolFactory().newSymbol("type",3, ((java_cup.runtime.Symbol)CUP$LibraryCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$LibraryCup$stack.peek()), RESULT);
            }
          return CUP$LibraryCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // type ::= BOOLEAN_KEYWORD 
            {
              Object RESULT =null;

              CUP$LibraryCup$result = parser.getSymbolFactory().newSymbol("type",3, ((java_cup.runtime.Symbol)CUP$LibraryCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$LibraryCup$stack.peek()), RESULT);
            }
          return CUP$LibraryCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // type ::= INT_KEYWORD 
            {
              Object RESULT =null;

              CUP$LibraryCup$result = parser.getSymbolFactory().newSymbol("type",3, ((java_cup.runtime.Symbol)CUP$LibraryCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$LibraryCup$stack.peek()), RESULT);
            }
          return CUP$LibraryCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // method_list ::= method 
            {
              Object RESULT =null;

              CUP$LibraryCup$result = parser.getSymbolFactory().newSymbol("method_list",9, ((java_cup.runtime.Symbol)CUP$LibraryCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$LibraryCup$stack.peek()), RESULT);
            }
          return CUP$LibraryCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // method_list ::= method_list method 
            {
              Object RESULT =null;

              CUP$LibraryCup$result = parser.getSymbolFactory().newSymbol("method_list",9, ((java_cup.runtime.Symbol)CUP$LibraryCup$stack.elementAt(CUP$LibraryCup$top-1)), ((java_cup.runtime.Symbol)CUP$LibraryCup$stack.peek()), RESULT);
            }
          return CUP$LibraryCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // method ::= method_type ID LP formal_list RP SEMICOLON 
            {
              Object RESULT =null;

              CUP$LibraryCup$result = parser.getSymbolFactory().newSymbol("method",8, ((java_cup.runtime.Symbol)CUP$LibraryCup$stack.elementAt(CUP$LibraryCup$top-5)), ((java_cup.runtime.Symbol)CUP$LibraryCup$stack.peek()), RESULT);
            }
          return CUP$LibraryCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // method ::= STATIC_KEYWORD method_type ID LP formal_list RP SEMICOLON 
            {
              Object RESULT =null;

              CUP$LibraryCup$result = parser.getSymbolFactory().newSymbol("method",8, ((java_cup.runtime.Symbol)CUP$LibraryCup$stack.elementAt(CUP$LibraryCup$top-6)), ((java_cup.runtime.Symbol)CUP$LibraryCup$stack.peek()), RESULT);
            }
          return CUP$LibraryCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // classDecl_list ::= classDecl 
            {
              Object RESULT =null;

              CUP$LibraryCup$result = parser.getSymbolFactory().newSymbol("classDecl_list",0, ((java_cup.runtime.Symbol)CUP$LibraryCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$LibraryCup$stack.peek()), RESULT);
            }
          return CUP$LibraryCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // classDecl_list ::= classDecl_list classDecl 
            {
              Object RESULT =null;

              CUP$LibraryCup$result = parser.getSymbolFactory().newSymbol("classDecl_list",0, ((java_cup.runtime.Symbol)CUP$LibraryCup$stack.elementAt(CUP$LibraryCup$top-1)), ((java_cup.runtime.Symbol)CUP$LibraryCup$stack.peek()), RESULT);
            }
          return CUP$LibraryCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // classDecl ::= CLASS_KEYWORD CLASS_ID LB method_list RB 
            {
              Object RESULT =null;

              CUP$LibraryCup$result = parser.getSymbolFactory().newSymbol("classDecl",1, ((java_cup.runtime.Symbol)CUP$LibraryCup$stack.elementAt(CUP$LibraryCup$top-4)), ((java_cup.runtime.Symbol)CUP$LibraryCup$stack.peek()), RESULT);
            }
          return CUP$LibraryCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= classDecl EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$LibraryCup$stack.elementAt(CUP$LibraryCup$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$LibraryCup$stack.elementAt(CUP$LibraryCup$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$LibraryCup$stack.elementAt(CUP$LibraryCup$top-1)).value;
		RESULT = start_val;
              CUP$LibraryCup$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$LibraryCup$stack.elementAt(CUP$LibraryCup$top-1)), ((java_cup.runtime.Symbol)CUP$LibraryCup$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$LibraryCup$parser.done_parsing();
          return CUP$LibraryCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // classDecl ::= CLASS_KEYWORD CLASS_ID EXTENDS_KEYWORD CLASS_ID LB method_list RB 
            {
              Object RESULT =null;

              CUP$LibraryCup$result = parser.getSymbolFactory().newSymbol("classDecl",1, ((java_cup.runtime.Symbol)CUP$LibraryCup$stack.elementAt(CUP$LibraryCup$top-6)), ((java_cup.runtime.Symbol)CUP$LibraryCup$stack.peek()), RESULT);
            }
          return CUP$LibraryCup$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

